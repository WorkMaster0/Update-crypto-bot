import requests
import logging
from typing import Dict, List, Tuple
import time

logger = logging.getLogger(__name__)

class ArbitrageAnalyzer:
    def __init__(self):
        self.base_url = "https://api.binance.com/api/v3"
        self.triangular_pairs = {}
        self.surface_rates = {}
        
    def get_ticker_prices(self) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ü—ñ–Ω–∏ –∑ Binance"""
        try:
            url = f"{self.base_url}/ticker/price"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            prices = {}
            for item in data:
                prices[item['symbol']] = float(item['price'])
                
            return prices
        except Exception as e:
            logger.error(f"Error getting ticker prices: {e}")
            return {}
    
    def find_triangular_arbitrage_pairs(self, prices: Dict[str, float]) -> List[Dict]:
        """–ó–Ω–∞–π—Ç–∏ —Ç—Ä–∏–∫—É—Ç–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –ø–∞—Ä–∏"""
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ USDT –ø–∞—Ä–∏
        usdt_pairs = {k: v for k, v in prices.items() if k.endswith('USDT')}
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –≤–∞–ª—é—Ç–∏, —è–∫—ñ —Ç–æ—Ä–≥—É—é—Ç—å—Å—è –ø—Ä–æ—Ç–∏ USDT
        currencies = set()
        for pair in usdt_pairs.keys():
            currency = pair.replace('USDT', '')
            currencies.add(currency)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —Ü—ñ–Ω –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–∞–ª—é—Ç–∏
        currency_prices = {}
        for currency in currencies:
            # –®—É–∫–∞—î–º–æ –ø–∞—Ä–∏ –º—ñ–∂ –≤–∞–ª—é—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTCETH)
            for target_currency in currencies:
                if currency != target_currency:
                    cross_pair = f"{currency}{target_currency}"
                    if cross_pair in prices:
                        if currency not in currency_prices:
                            currency_prices[currency] = {}
                        currency_prices[currency][target_currency] = prices[cross_pair]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—Ä–∏–∫—É—Ç–Ω—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        arbitrage_opportunities = []
        
        for currency_a in currencies:
            for currency_b in currencies:
                if currency_a != currency_b:
                    # –®—É–∫–∞—î–º–æ —à–ª—è—Ö: A -> B -> USDT -> A
                    if (currency_a in currency_prices and 
                        currency_b in currency_prices[currency_a] and
                        f"{currency_b}USDT" in usdt_pairs and
                        f"{currency_a}USDT" in usdt_pairs):
                        
                        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
                        rate_ab = currency_prices[currency_a].get(currency_b, 0)
                        if rate_ab == 0:
                            continue

                        rate_b_usdt = usdt_pairs.get(f"{currency_b}USDT", 0)
                        if rate_b_usdt == 0:
                            continue

                        usdt_a_price = usdt_pairs.get(f"{currency_a}USDT", 0)
                        if usdt_a_price == 0:
                            continue

                        rate_usdt_a = 1 / usdt_a_price
                        
                        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂
                        final_rate = rate_ab * rate_b_usdt * rate_usdt_a
                        
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
                        profitability = (final_rate - 1) * 100
                        
                        if abs(profitability) > 0.1:  # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞—á–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
                            opportunity = {
                                'path': f"{currency_a} -> {currency_b} -> USDT -> {currency_a}",
                                'profitability': profitability,
                                'rates': {
                                    f"{currency_a}/{currency_b}": rate_ab,
                                    f"{currency_b}/USDT": rate_b_usdt,
                                    f"USDT/{currency_a}": rate_usdt_a
                                },
                                'final_rate': final_rate
                            }
                            arbitrage_opportunities.append(opportunity)
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—é
        arbitrage_opportunities.sort(key=lambda x: abs(x['profitability']), reverse=True)
        return arbitrage_opportunities
    
    def calculate_depth_arbitrage(self, symbol: str) -> Dict:
        """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥–ª–∏–±–∏–Ω–∏ —Ä–∏–Ω–∫—É"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≥–ª–∏–±–∏–Ω—É —Ä–∏–Ω–∫—É
            url = f"{self.base_url}/depth?symbol={symbol}&limit=20"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ü—ñ–Ω–∏ –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É
            best_bid = float(data['bids'][0][0]) if data['bids'] else 0
            best_ask = float(data['asks'][0][0]) if data['asks'] else 0
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø—Ä–µ–¥
            spread = best_ask - best_bid
            spread_percentage = (spread / best_bid) * 100 if best_bid > 0 else 0
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ–±—Å—è–≥–∏
            bid_volume = sum(float(bid[1]) for bid in data['bids'][:5])
            ask_volume = sum(float(ask[1]) for ask in data['asks'][:5])
            
            return {
                'symbol': symbol,
                'best_bid': best_bid,
                'best_ask': best_ask,
                'spread': spread,
                'spread_percentage': spread_percentage,
                'bid_volume': bid_volume,
                'ask_volume': ask_volume,
                'imbalance': bid_volume / ask_volume if ask_volume > 0 else 0
            }
        except Exception as e:
            logger.error(f"Error calculating depth arbitrage for {symbol}: {e}")
            return {}
    
    def find_cross_exchange_opportunities(self, prices: Dict[str, float]) -> List[Dict]:
        """–ó–Ω–∞–π—Ç–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –º—ñ–∂–±—ñ—Ä–∂–æ–≤–æ–≥–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É (—Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ)"""
        # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ–Ω—à–∏–º–∏ –±—ñ—Ä–∂–∞–º–∏
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
        return []
    
    def format_opportunity_message(self, opportunity: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å"""
        profit = opportunity['profitability']
        profit_emoji = "üü¢" if profit > 0 else "üî¥"
        
        message = f"{profit_emoji} <b>–ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å</b>\n"
        message += f"–®–ª—è—Ö: {opportunity['path']}\n"
        message += f"–ü—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å: <b>{profit:+.4f}%</b>\n"
        message += f"–§—ñ–Ω–∞–ª—å–Ω–∏–π –∫—É—Ä—Å: {opportunity['final_rate']:.8f}\n"
        
        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ –∫—É—Ä—Å–∞–º
        for pair, rate in opportunity['rates'].items():
            message += f"{pair}: {rate:.8f}\n"
            
        return message

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
arbitrage_analyzer = ArbitrageAnalyzer()