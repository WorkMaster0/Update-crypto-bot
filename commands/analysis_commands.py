import logging
from telebot import TeleBot
from telebot.types import Message
from utils.api_client import BinanceClient
from analyzers.pump_detector import detect_pump_activity, analyze_volume
from analyzers.volume_analyzer import detect_volume_anomaly

logger = logging.getLogger(__name__)
binance_client = BinanceClient()

def setup_analysis_commands(bot: TeleBot, settings):
    @bot.message_handler(commands=['pump_scan'])
    def pump_scan_handler(message: Message):
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–∞–º–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        try:
            msg = bot.send_message(message.chat.id, "üîç –°–∫–∞–Ω—É—é –Ω–∞ –ø–∞–º–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Binance
            ticker_data = binance_client.get_ticker_24hr()
            if not ticker_data:
                bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Binance", message.chat.id, msg.message_id)
                return
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º –æ–±—Å—è–≥–æ–º
            symbols = [
                d for d in ticker_data
                if isinstance(d, dict) and 
                d.get("symbol", "").endswith("USDT") and 
                float(d.get("quoteVolume", 0)) > settings['min_volume']
            ]
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ % –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
            symbols = sorted(
                symbols,
                key=lambda x: abs(float(x.get("priceChangePercent", 0))),
                reverse=True
            )
            
            top_symbols = [s["symbol"] for s in symbols[:settings['top_symbols']]]
            pump_signals = []
            
            for symbol in top_symbols:
                try:
                    df = binance_client.get_klines(symbol, interval="1h", limit=200)
                    if not df or len(df.get("c", [])) < 50:
                        continue
                    
                    closes = [float(c) for c in df["c"]]
                    volumes = [float(v) for v in df["v"]]
                    
                    # –î–µ—Ç–µ–∫—Ç—É—î–º–æ –ø–∞–º–ø –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    pump_type, price_change, pump_data = detect_pump_activity(
                        symbol, closes, volumes, settings
                    )
                    
                    if pump_type == "PUMP":
                        risk_level = pump_data.get('risk_level', 5)
                        risk_emoji = "üî¥" if risk_level > 7 else "üü°" if risk_level > 5 else "üü¢"
                        
                        signal_text = (
                            f"{risk_emoji} <b>{symbol}</b>\n"
                            f"üìà –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change:+.1f}%\n"
                            f"‚ö†Ô∏è –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {risk_level}/10\n"
                            f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {pump_data.get('volatility', 0):.1f}%\n"
                            f"üü¢ –ó–µ–ª–µ–Ω—ñ —Å–≤—ñ—á–∫–∏: {pump_data.get('green_candles', 0)}/24\n"
                            f"üíπ –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –æ–±—Å—è–≥—É: {pump_data.get('volume_metrics', {}).get('volume_ratio', 0):.1f}x\n"
                        )
                        
                        if risk_level > 7:
                            signal_text += "üîª –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ –∫–æ—Ä–µ–∫—Ü—ñ—ó!\n"
                        
                        pump_signals.append(signal_text)
                        
                except Exception as e:
                    logger.error(f"Error processing {symbol}: {e}")
                    continue
            
            if not pump_signals:
                bot.edit_message_text("‚ÑπÔ∏è –ü–∞–º–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", message.chat.id, msg.message_id)
            else:
                text = "<b>üö® –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–º–ø–∞:</b>\n\n" + "\n".join(pump_signals[:5])
                bot.edit_message_text(text, message.chat.id, msg.message_id, parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"Error in pump_scan: {e}")
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    @bot.message_handler(commands=['volume_anomaly'])
    def volume_anomaly_handler(message: Message):
        """–ü–æ—à—É–∫ –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –æ–±—Å—è–≥—ñ–≤ —Ç–æ—Ä–≥—ñ–≤"""
        try:
            msg = bot.send_message(message.chat.id, "üîç –®—É–∫–∞—é –∞–Ω–æ–º–∞–ª—å–Ω—ñ –æ–±—Å—è–≥–∏...")
            
            ticker_data = binance_client.get_ticker_24hr()
            if not ticker_data:
                bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö", message.chat.id, msg.message_id)
                return
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ —Å–∏–º–≤–æ–ª–∏
            symbols = [
                d for d in ticker_data
                if isinstance(d, dict) and 
                d.get("symbol", "").endswith("USDT") and 
                float(d.get("quoteVolume", 0)) > settings['min_volume'] / 10  # –ù–∏–∂—á–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è –∞–Ω–æ–º–∞–ª—ñ–π
            ]
            
            symbols = sorted(
                symbols,
                key=lambda x: float(x.get("quoteVolume", 0)),
                reverse=True
            )
            
            top_symbols = [s["symbol"] for s in symbols[:50]]  # –ë—ñ–ª—å—à–µ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            anomalies = []
            
            for symbol in top_symbols:
                try:
                    df = binance_client.get_klines(symbol, interval="1h", limit=100)
                    if not df or len(df.get("v", [])) < 24:
                        continue
                    
                    volumes = [float(v) for v in df["v"]]
                    
                    # –®—É–∫–∞—î–º–æ –∞–Ω–æ–º–∞–ª—ñ—ó –æ–±—Å—è–≥—É
                    is_anomaly, anomaly_data = detect_volume_anomaly(symbol, volumes, settings)
                    
                    if is_anomaly:
                        anomaly_text = (
                            f"üìä <b>{symbol}</b>\n"
                            f"üí• –ü–æ—Ç–æ—á–Ω–∏–π –æ–±—Å—è–≥: {anomaly_data.get('current_volume', 0):.0f}\n"
                            f"üìà –°–µ—Ä–µ–¥–Ω—ñ–π –æ–±—Å—è–≥: {anomaly_data.get('avg_volume_24h', 0):.0f}\n"
                            f"üöÄ –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {anomaly_data.get('volume_ratio', 0):.1f}x\n"
                        )
                        anomalies.append(anomaly_text)
                        
                except Exception as e:
                    logger.error(f"Error processing {symbol}: {e}")
                    continue
            
            if not anomalies:
                bot.edit_message_text("‚ÑπÔ∏è –ê–Ω–æ–º–∞–ª—ñ–π –æ–±—Å—è–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", message.chat.id, msg.message_id)
            else:
                text = "<b>üìà –ê–Ω–æ–º–∞–ª—å–Ω—ñ –æ–±—Å—è–≥–∏ —Ç–æ—Ä–≥—ñ–≤:</b>\n\n" + "\n".join(anomalies[:8])
                bot.edit_message_text(text, message.chat.id, msg.message_id, parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"Error in volume_anomaly: {e}")
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    @bot.message_handler(commands=['advanced_analysis'])
    def advanced_analysis_handler(message: Message):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–∞–∑–∞–Ω–æ —Ç–æ–∫–µ–Ω
            parts = message.text.split()
            if len(parts) < 2:
                bot.reply_to(message, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /advanced_analysis BTC")
                return
                
            symbol = parts[1].upper() + "USDT"
            msg = bot.send_message(message.chat.id, f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {symbol}...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
            df = binance_client.get_klines(symbol, interval="1h", limit=200)
            if not df or len(df.get("c", [])) < 50:
                bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞", message.chat.id, msg.message_id)
                return
            
            closes = [float(c) for c in df["c"]]
            volumes = [float(v) for v in df["v"]]
            last_price = closes[-1]
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∏–¥–∏ –∞–Ω–∞–ª—ñ–∑—É
            pump_type, price_change, pump_data = detect_pump_activity(symbol, closes, volumes, settings)
            is_volume_anomaly, volume_data = detect_volume_anomaly(symbol, volumes, settings)
            volume_metrics = analyze_volume(volumes, settings)
            
            # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
            report_text = f"<b>üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ {symbol}</b>\n\n"
            report_text += f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${last_price:.4f}\n"
            report_text += f"üìà –ó–º—ñ–Ω–∞ –∑–∞ 24–≥: {price_change:+.1f}%\n"
            
            if pump_type:
                report_text += f"üö® –¢–∏–ø –ø–æ–¥—ñ—ó: {pump_type}\n"
                report_text += f"‚ö†Ô∏è –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {pump_data.get('risk_level', 5)}/10\n"
            
            report_text += f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {calculate_volatility(closes[-24:]):.1f}%\n"
            report_text += f"üíπ –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –æ–±—Å—è–≥—É: {volume_metrics.get('volume_ratio', 0):.1f}x\n"
            
            if is_volume_anomaly:
                report_text += "üî¥ –í–∏—è–≤–ª–µ–Ω–æ –∞–Ω–æ–º–∞–ª—ñ—é –æ–±—Å—è–≥—É!\n"
            
            # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
            if pump_type == "PUMP" and pump_data.get('risk_level', 5) > 7:
                report_text += "\nüîª –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫! –£–Ω–∏–∫–∞–π—Ç–µ –≤—Ö–æ–¥—É.\n"
            elif pump_type == "PUMP":
                report_text += "\nüü° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –û–±–µ—Ä–µ–∂–Ω–æ! –ú–æ–∂–ª–∏–≤–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è.\n"
            elif price_change < -10:
                report_text += "\nüü¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ú–æ–∂–ª–∏–≤–∏–π –≤—ñ–¥—Å–∫–æ–∫ –ø—ñ—Å–ª—è –ø–∞–¥—ñ–Ω–Ω—è.\n"
            else:
                report_text += "\n‚ö™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è.\n"
            
            bot.edit_message_text(report_text, message.chat.id, msg.message_id, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error in advanced_analysis: {e}")
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")