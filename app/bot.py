from telebot import TeleBot, types
import requests
import numpy as np
import re
from datetime import datetime
from app.config import TELEGRAM_BOT_TOKEN
from app.analytics import (
    get_price, get_klines, generate_signal_text, trend_strength_text,
    find_levels, top_movers, position_size, normalize_symbol,
    find_atr_squeeze, detect_liquidity_trap, calculate_rsi, calculate_macd,
    get_multi_timeframe_trend, get_crypto_sentiment
)
from app.chart import plot_candles
from app.config import DEFAULT_INTERVAL, ALLOWED_INTERVALS

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

bot = TeleBot(TELEGRAM_BOT_TOKEN, parse_mode="HTML")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
_user_defaults = {}
_notify_settings = {}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", DEFAULT_INTERVAL)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    if len(parts) >= 2:
        symbol = normalize_symbol(parts[1])
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    return symbol, interval

# ---------- –ö–û–ú–ê–ù–î–ò –í–Ü–î–ü–ê–õ–Æ–í–ê–ù–ù–Ø ----------
@bot.message_handler(commands=['start', 'help'])
def start_handler(message):
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üìä –ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏"),
        types.KeyboardButton("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É"),
        types.KeyboardButton("ü§ñ AI —Å–∏–≥–Ω–∞–ª–∏"),
        types.KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    )
    
    welcome_text = """
üöÄ <b>Crypto Analysis Pro Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
‚Ä¢ /analyze BTCUSDT - –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
‚Ä¢ /scan gainers - —Ç–æ–ø —Ä–æ—Å—Ç—É
‚Ä¢ /scan volume - —Ç–æ–ø –æ–±—Å—è–≥—ñ–≤
‚Ä¢ /risk 1000 1 65000 64000 - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∏–∑–∏–∫—É

<b>AI —Ñ—É–Ω–∫—Ü—ñ—ó:</b>
‚Ä¢ /ai_signal BTCUSDT - AI —Å–∏–≥–Ω–∞–ª
‚Ä¢ /ai_strategy BTCUSDT - —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
‚Ä¢ /ai_scan - AI —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è

<b>–î–æ–¥–∞—Ç–∫–æ–≤–æ:</b>
‚Ä¢ /chart BTCUSDT - –≥—Ä–∞—Ñ—ñ–∫
‚Ä¢ /levels BTCUSDT - —Ä—ñ–≤–Ω—ñ
‚Ä¢ /price BTCUSDT - —Ü—ñ–Ω–∞
‚Ä¢ /setdefault 1h - —ñ–Ω—Ç–µ—Ä–≤–∞–ª

üéØ <i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É</i>
    """
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

# ---------- –û–ë–†–û–ë–ù–ò–ö–ò –ö–ù–û–ü–û–ö ----------
@bot.message_handler(func=lambda message: message.text == "üìä –ê–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏")
def analyze_button_handler(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT):")
    bot.register_next_step_handler(message, process_analyze_symbol)

def process_analyze_symbol(message):
    symbol = normalize_symbol(message.text)
    analyze_handler(message, symbol)

@bot.message_handler(func=lambda message: message.text == "üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É")
def scan_button_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìà –¢–æ–ø —Ä–æ—Å—Ç—É", callback_data="scan_gainers"),
        types.InlineKeyboardButton("üìâ –¢–æ–ø –ø–∞–¥—ñ–Ω–Ω—è", callback_data="scan_losers"),
        types.InlineKeyboardButton("üíé –í–∏—Å–æ–∫–∏–π –æ–±—Å—è–≥", callback_data="scan_volume"),
        types.InlineKeyboardButton("üöÄ –ü—Ä–æ–±–æ—ó", callback_data="scan_breakouts")
    )
    bot.send_message(message.chat.id, "üîç –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "ü§ñ AI —Å–∏–≥–Ω–∞–ª–∏")
def ai_button_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä AI —Å–∏–≥–Ω–∞–ª", callback_data="ai_signal_menu"),
        types.InlineKeyboardButton("üîç AI —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è", callback_data="ai_scan"),
        types.InlineKeyboardButton("üéØ AI —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è", callback_data="ai_strategy_menu")
    )
    bot.send_message(message.chat.id, "ü§ñ –û–±–µ—Ä—ñ—Ç—å AI —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
def settings_button_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    intervals = ['1h', '4h', '1d', '15m', '1m']
    buttons = [types.InlineKeyboardButton(f"‚è∞ {iv}", callback_data=f"set_interval_{iv}") for iv in intervals]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "‚öôÔ∏è –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:", reply_markup=markup)

# ---------- –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò ----------
@bot.message_handler(commands=['analyze'])
def analyze_command_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        bot.send_message(message.chat.id, "üîç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /analyze BTCUSDT):")
        bot.register_next_step_handler(message, process_analyze_command)
    else:
        analyze_handler(message, symbol, interval)

def process_analyze_command(message):
    symbol = normalize_symbol(message.text)
    analyze_handler(message, symbol)

def analyze_handler(message, symbol, interval=None):
    """–£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏"""
    interval = interval or _default_interval(message.chat.id)
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {symbol} [{interval}]...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval=interval)
        signal_text = generate_signal_text(symbol, interval=interval)
        levels = find_levels(candles)
        trend_text = trend_strength_text(candles)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        rsi = calculate_rsi(candles["c"], 14)[-1]
        macd_line, signal_line, macd_hist = calculate_macd(candles["c"])
        htf_trend = get_multi_timeframe_trend(symbol, interval)
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [
            f"üéØ <b>–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ {symbol} [{interval}]</b>",
            f"",
            f"üìä {signal_text.split('|')[0]}",  # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —Å–∏–≥–Ω–∞–ª—É
            f"",
            f"üìà <b>–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:</b>",
            f"‚Ä¢ RSI(14): {rsi:.1f}",
            f"‚Ä¢ MACD Hist: {macd_hist[-1]:.4f}",
            f"‚Ä¢ –¢—Ä–µ–Ω–¥ —Å—Ç–∞—Ä—à–æ–≥–æ TF: {htf_trend}",
            f"",
            f"üîç <b>–ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ:</b>",
            f"‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {levels['near_support'] or 'N/A':.4f}",
            f"‚Ä¢ –û–ø—ñ—Ä: {levels['near_resistance'] or 'N/A':.4f}",
            f"‚Ä¢ ATR: {levels['atr']:.4f}",
            f"",
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> {_generate_recommendation(signal_text, rsi, macd_hist[-1])}"
        ]
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫", callback_data=f"chart_{symbol}_{interval}"),
            types.InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"reanalyze_{symbol}_{interval}"),
            types.InlineKeyboardButton("ü§ñ –î–µ—Ç–∞–ª—å–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑", callback_data=f"ai_full_{symbol}")
        )
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}")

def _generate_recommendation(signal_text, rsi, macd_hist):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤"""
    if "LONG" in signal_text and rsi < 70 and macd_hist > 0:
        return "üü¢ –ú–æ–∂–ª–∏–≤–∏–π –ª–æ–Ω–≥ - —á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
    elif "SHORT" in signal_text and rsi > 30 and macd_hist < 0:
        return "üî¥ –ú–æ–∂–ª–∏–≤–∏–π —à–æ—Ä—Ç - —á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
    elif abs(rsi - 50) < 10:
        return "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ - —Ä–∏–Ω–æ–∫ —É –∫–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—ó"
    else:
        return "‚ö™Ô∏è –ß–µ–∫–∞–π—Ç–µ —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"

@bot.message_handler(commands=['scan'])
def scan_handler(message):
    parts = message.text.split()
    scan_type = 'gainers' if len(parts) < 2 else parts[1].lower()
    
    scan_types = {
        'gainers': ('–¢–æ–ø —Ä–æ—Å—Ç—É', 'priceChangePercent', True),
        'losers': ('–¢–æ–ø –ø–∞–¥—ñ–Ω–Ω—è', 'priceChangePercent', False),
        'volume': ('–¢–æ–ø –æ–±—Å—è–≥—ñ–≤', 'quoteVolume', True),
        'breakouts': ('–ü—Ä–æ–±–æ—ó', 'priceChangePercent', True),
        'liquid': ('–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å', 'quoteVolume', True)
    }
    
    if scan_type not in scan_types:
        return bot.reply_to(message, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏: gainers, losers, volume, breakouts, liquid")
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"üîç –°–∫–∞–Ω—É—é {scan_types[scan_type][0]}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 10000000 and
                float(d['lastPrice']) > 0.01)
        ]
        
        key, reverse = scan_types[scan_type][1], scan_types[scan_type][2]
        sorted_pairs = sorted(usdt_pairs, 
                            key=lambda x: abs(float(x[key])) if scan_type == 'breakouts' else float(x[key]), 
                            reverse=reverse)
        
        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [f"üìä <b>{scan_types[scan_type][0]}:</b>\n"]
        
        for i, pair in enumerate(sorted_pairs[:15], 1):
            symbol = pair['symbol']
            price = float(pair['lastPrice'])
            change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000
            
            emoji = "üü¢" if change > 0 else "üî¥"
            
            if scan_type in ['gainers', 'losers', 'breakouts']:
                response.append(f"{i}. {emoji} {symbol}: {change:+.2f}% | ${price:.4f}")
            else:
                response.append(f"{i}. {symbol}: ${price:.4f} | Vol: {volume:.1f}M")
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        markup = types.InlineKeyboardMarkup()
        for pair in sorted_pairs[:3]:
            markup.add(types.InlineKeyboardButton(
                f"üìä {pair['symbol']}", 
                callback_data=f"analyze_{pair['symbol']}"
            ))
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {str(e)}")

@bot.message_handler(commands=['price'])
def price_handler(message):
    symbol, _ = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/price BTCUSDT</code>")
    try:
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ <b>{symbol}</b> = <b>{price:.6f}</b> USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['chart'])
def chart_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/chart BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        img = plot_candles(symbol, interval=interval, limit=200, with_levels=True)
        bot.send_photo(message.chat.id, img, caption=f"üìä <b>{symbol} [{interval}]</b>")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['levels'])
def levels_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/levels BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        lv = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in lv["supports"][-3:])
        r = ", ".join(f"{x:.4f}" for x in lv["resistances"][-3:])
        bot.reply_to(message, (
            f"üîé <b>{symbol}</b> [{interval}] Levels\n"
            f"Supports: {s or '‚Äî'}\n"
            f"Resistances: {r or '‚Äî'}\n"
            f"Nearest S: <b>{lv['near_support']:.4f}</b> | "
            f"Nearest R: <b>{lv['near_resistance']:.4f}</b>\n"
            f"ATR(14): {lv['atr']:.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['risk'])
def risk_handler(message):
    parts = message.text.split()
    if len(parts) < 5:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/risk 1000 1 65000 64000</code> (balance risk% entry stop)")
    try:
        balance = float(parts[1])
        risk_pct = float(parts[2])
        entry = float(parts[3])
        stop = float(parts[4])
        res = position_size(balance, risk_pct, entry, stop)
        bot.reply_to(message, (
            f"üßÆ Risk: {risk_pct:.2f}% –≤—ñ–¥ ${balance:.2f} ‚Üí ${res['risk_amount']:.2f}\n"
            f"üì¶ Position size ‚âà <b>{res['qty']:.6f}</b> —Ç–æ–∫–µ–Ω—ñ–≤\n"
            f"üéØ 1R ‚âà {abs(entry - stop):.4f} | 2R TP ‚âà {entry + (res['rr_one_tp'] if entry>stop else -res['rr_one_tp']):.4f}"
        ))
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- AI –ö–û–ú–ê–ù–î–ò ----------
@bot.message_handler(commands=['ai_signal'])
def ai_signal_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/ai_signal BTCUSDT</code>")
    interval = interval or _default_interval(message.chat.id)
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª
        signal_text = generate_signal_text(symbol, interval=interval)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π AI –∞–Ω–∞–ª—ñ–∑
        sentiment_value, sentiment_text = get_crypto_sentiment()
        htf_trend = get_multi_timeframe_trend(symbol, interval)
        
        response = [
            f"ü§ñ <b>AI –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} [{interval}]:</b>\n",
            f"üìä {signal_text}",
            f"",
            f"üé≠ <b>–ù–∞—Å—Ç—Ä–æ—ó —Ä–∏–Ω–∫—É:</b> {sentiment_value or 'N/A'} ({sentiment_text})",
            f"üìà <b>–°—Ç–∞—Ä—à–∏–π TF:</b> {htf_trend}",
            f"",
            f"üí° <b>AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>",
            f"{_generate_ai_recommendation(signal_text, sentiment_value, htf_trend)}"
        ]
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response))
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def _generate_ai_recommendation(signal_text, sentiment_value, htf_trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if "LONG" in signal_text and sentiment_value and sentiment_value < 40 and "UP" in htf_trend:
        return "üü¢ –°–ò–õ–¨–ù–ò–ô –ª–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª - –≤—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –≤—ñ–¥–∫–∞—Ç–∞—Ö"
    elif "SHORT" in signal_text and sentiment_value and sentiment_value > 60 and "DOWN" in htf_trend:
        return "üî¥ –°–ò–õ–¨–ù–ò–ô —à–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª - –≤—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –≤—ñ–¥—Å–∫–æ–∫–∞—Ö"
    elif "LONG" in signal_text:
        return "üü¢ –õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª - —á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
    elif "SHORT" in signal_text:
        return "üî¥ –®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª - —á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
    else:
        return "‚ö™Ô∏è –ù–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ - —á–µ–∫–∞–π—Ç–µ"

@bot.message_handler(commands=['ai_scan'])
def ai_scan_handler(message):
    try:
        processing_msg = bot.send_message(message.chat.id, "ü§ñ AI —Å–∫–∞–Ω—É—î —Ä–∏–Ω–æ–∫...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –º–æ–Ω–µ—Ç–∏
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 50000000 and
                float(d['lastPrice']) > 0.01)
        ]
        
        # –°–∫–∞–Ω—É—î–º–æ –∫–æ–∂–Ω—É –º–æ–Ω–µ—Ç—É
        opportunities = []
        for pair in usdt_pairs[:20]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            symbol = pair['symbol']
            try:
                signal_text = generate_signal_text(symbol, interval="1h")
                if any(keyword in signal_text for keyword in ['LONG', 'SHORT', 'BUY', 'SELL']):
                    change = float(pair['priceChangePercent'])
                    volume = float(pair['quoteVolume']) / 1000000
                    opportunities.append((symbol, signal_text, change, volume))
            except:
                continue
        
        if not opportunities:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–∏–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Å—è–≥–æ–º
        opportunities.sort(key=lambda x: x[3], reverse=True)
        
        response = ["ü§ñ <b>AI –¢–æ–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</b>\n"]
        
        for symbol, signal, change, volume in opportunities[:8]:
            direction = "üü¢" if "LONG" in signal or "BUY" in signal else "üî¥"
            response.append(f"{direction} <b>{symbol}</b> - {change:+.2f}% | Vol: {volume:.1f}M")
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response))
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['ai_strategy'])
def ai_strategy_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/ai_strategy BTCUSDT</code>")
    interval = interval or _default_interval(message.chat.id)
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"üéØ AI —Å—Ç–≤–æ—Ä—é—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –¥–ª—è {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval=interval)
        levels = find_levels(candles)
        current_price = candles["c"][-1]
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
        strategy = _generate_trading_strategy(symbol, candles, levels, current_price)
        
        response = [
            f"üéØ <b>AI –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è {symbol} [{interval}]:</b>\n",
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current_price:.4f}",
            f"",
            f"üîç <b>–ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ:</b>",
            f"‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {levels['near_support'] or 'N/A':.4f}",
            f"‚Ä¢ –û–ø—ñ—Ä: {levels['near_resistance'] or 'N/A':.4f}",
            f"",
            f"üöÄ <b>–°—Ç—Ä–∞—Ç–µ–≥—ñ—è:</b>",
            f"{strategy}",
            f"",
            f"üí° <b>–†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>",
            f"‚Ä¢ –†–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É: 1-2%",
            f"‚Ä¢ Stop Loss: 1-2x ATR ({levels['atr']:.4f})",
            f"‚Ä¢ Take Profit: 2-3x Risk"
        ]
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response))
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def _generate_trading_strategy(symbol, candles, levels, current_price):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"""
    rsi = calculate_rsi(candles["c"], 14)[-1]
    macd_line, signal_line, macd_hist = calculate_macd(candles["c"])
    
    if rsi < 35 and macd_hist[-1] > 0 and levels['near_support']:
        return f"üü¢ –õ–û–ù–ì —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: –í—Ö—ñ–¥ –±—ñ–ª—è {levels['near_support']:.4f}, SL: {levels['near_support'] - levels['atr']:.4f}"
    elif rsi > 65 and macd_hist[-1] < 0 and levels['near_resistance']:
        return f"üî¥ –®–û–†–¢ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: –í—Ö—ñ–¥ –±—ñ–ª—è {levels['near_resistance']:.4f}, SL: {levels['near_resistance'] + levels['atr']:.4f}"
    else:
        return "‚ö™Ô∏è –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è: –ß–µ–∫–∞–π—Ç–µ –ø—Ä–æ–±–æ—é —Ä—ñ–≤–Ω—ñ–≤ –∞–±–æ –≤—ñ–¥—Å–∫–æ–∫—É"

# ---------- CALLBACK HANDLERS ----------
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    try:
        if call.data.startswith('chart_'):
            data = call.data.split('_')
            symbol, interval = data[1], data[2]
            show_chart(call, symbol, interval)
        elif call.data.startswith('analyze_'):
            symbol = call.data.replace('analyze_', '')
            analyze_callback(call, symbol)
        elif call.data.startswith('reanalyze_'):
            data = call.data.split('_')
            symbol, interval = data[1], data[2]
            reanalyze(call, symbol, interval)
        elif call.data.startswith('scan_'):
            scan_type = call.data.replace('scan_', '')
            scan_callback(call, scan_type)
        elif call.data.startswith('set_interval_'):
            interval = call.data.replace('set_interval_', '')
            set_interval_callback(call, interval)
            
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def show_chart(call, symbol, interval):
    try:
        img = plot_candles(symbol, interval=interval, limit=100)
        bot.send_photo(call.message.chat.id, img, caption=f"üìä {symbol} [{interval}]")
        bot.answer_callback_query(call.id, "üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def analyze_callback(call, symbol):
    try:
        bot.answer_callback_query(call.id, f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {symbol}...")
        analyze_handler(call.message, symbol)
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def reanalyze(call, symbol, interval):
    try:
        bot.answer_callback_query(call.id, "üîÑ –û–Ω–æ–≤–ª—é—é –∞–Ω–∞–ª—ñ–∑...")
        analyze_handler(call.message, symbol, interval)
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def scan_callback(call, scan_type):
    try:
        fake_msg = type('obj', (object,), {'chat': type('obj', (object,), {'id': call.message.chat.id})})
        scan_handler(fake_msg, scan_type)
        bot.answer_callback_query(call.id, "üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def set_interval_callback(call, interval):
    try:
        _user_defaults.setdefault(call.message.chat.id, {})["interval"] = interval
        bot.answer_callback_query(call.id, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval}")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- SET DEFAULT INTERVAL ----------
@bot.message_handler(commands=['setdefault'])
def setdefault_handler(message):
    parts = message.text.split()
    if len(parts) < 2 or parts[1] not in ALLOWED_INTERVALS:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/setdefault 1h</code>")
    _user_defaults.setdefault(message.chat.id, {})["interval"] = parts[1]
    bot.reply_to(message, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: <b>{parts[1]}</b>")

# ---------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----------
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()
