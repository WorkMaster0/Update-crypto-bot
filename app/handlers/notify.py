# handlers/notify.py
from telebot import types
from datetime import datetime
import re
from app.bot import bot
from app.analytics import send_test_notification
from handlers.ai_alert import generate_ai_signal

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ----------
notify_settings = {}       # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_settings_state = {}   # –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É

# ---------- CALLBACK HANDLERS ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("type_"))
def handle_signal_types(call):
    user_id = call.from_user.id
    type_map = {
        "type_all": ["ALL"],
        "type_breakout": ["BREAKOUT"],
        "type_trend": ["TREND"],
        "type_squeeze": ["SQUEEZE"]
    }
    if user_id not in notify_settings:
        notify_settings[user_id] = {"enabled": True}
    notify_settings[user_id]['signal_types'] = type_map.get(call.data, ["ALL"])
    bot.answer_callback_query(call.id, f"‚úÖ –¢–∏–ø —Å–∏–≥–Ω–∞–ª—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {notify_settings[user_id]['signal_types']}")
    show_config_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_"))
def remove_favorite_callback(call):
    user_id = call.from_user.id
    symbol = call.data.replace("remove_", "")
    if user_id in notify_settings and 'favorite_coins' in notify_settings[user_id]:
        if symbol in notify_settings[user_id]['favorite_coins']:
            notify_settings[user_id]['favorite_coins'].remove(symbol)
            bot.answer_callback_query(call.id, f"‚úÖ {symbol} –≤–∏–¥–∞–ª–µ–Ω–æ")
        else:
            bot.answer_callback_query(call.id, f"‚ùå {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    show_favorites_menu(call)

@bot.callback_query_handler(func=lambda call: call.data == "clear_all")
def clear_all_favorites(call):
    user_id = call.from_user.id
    if user_id in notify_settings and 'favorite_coins' in notify_settings[user_id]:
        notify_settings[user_id]['favorite_coins'] = []
        bot.answer_callback_query(call.id, "‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ")
    show_favorites_menu(call)

# ---------- SHOW MENUS ----------
def show_config_menu(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å", callback_data="config_confidence"),
        types.InlineKeyboardButton("üìä –¢–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤", callback_data="config_types")
    )
    markup.row(
        types.InlineKeyboardButton("‚è∞ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", callback_data="config_time"),
        types.InlineKeyboardButton("üíé –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏", callback_data="config_favorites")
    )
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_back"))

    response = "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏:"
    try:
        bot.edit_message_text(call.message.chat.id, call.message.message_id, response, parse_mode="HTML", reply_markup=markup)
    except:
        bot.send_message(call.message.chat.id, response, parse_mode="HTML", reply_markup=markup)

def show_signal_types_menu(call):
    user_id = call.from_user.id
    current_types = notify_settings.get(user_id, {}).get('signal_types', ['ALL'])
    response = ["üìä <b>–¢–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤:</b>"]
    response += [f"{'‚úÖ' if t in current_types else '‚ö™Ô∏è'} {t}" for t in ['ALL','BREAKOUT','TREND','SQUEEZE']]

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –í–°–Ü", callback_data="type_all"),
        types.InlineKeyboardButton("üöÄ –ü–†–û–ë–û–á", callback_data="type_breakout")
    )
    markup.row(
        types.InlineKeyboardButton("üìà –¢–†–ï–ù–î–ò", callback_data="type_trend"),
        types.InlineKeyboardButton("üîç –°–ö–í–Ü–ó–ò", callback_data="type_squeeze")
    )
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_config"))

    try:
        bot.edit_message_text(call.message.chat.id, call.message.message_id, "\n".join(response), parse_mode="HTML", reply_markup=markup)
    except:
        bot.send_message(call.message.chat.id, "\n".join(response), parse_mode="HTML", reply_markup=markup)

def show_favorites_menu(call):
    user_id = call.from_user.id
    favorites = notify_settings.get(user_id, {}).get('favorite_coins', [])
    response = ["üíé <b>–£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏:</b>\n"]
    markup = types.InlineKeyboardMarkup()
    if favorites:
        for coin in favorites:
            response.append(f"‚Ä¢ {coin}")
            markup.add(types.InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {coin}", callback_data=f"remove_{coin}"))
        response.append("\nüéØ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º–æ–Ω–µ—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
    else:
        response.append("‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")

    markup.row(types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ", callback_data="clear_all"))
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_config"))

    try:
        bot.edit_message_text(call.message.chat.id, call.message.message_id, "\n".join(response), parse_mode="HTML", reply_markup=markup)
    except:
        bot.send_message(call.message.chat.id, "\n".join(response), parse_mode="HTML", reply_markup=markup)

# ---------- HANDLE TEXT INPUT ----------
@bot.message_handler(func=lambda m: True)
def handle_text_messages(message):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    # –û—á–∏—Å—Ç–∫–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    if text == "clear":
        if user_id in notify_settings and 'favorite_coins' in notify_settings[user_id]:
            notify_settings[user_id]['favorite_coins'] = []
            bot.send_message(user_id, "‚úÖ –°–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –æ—á–∏—â–µ–Ω–æ!")
        else:
            bot.send_message(user_id, "‚ùå –°–ø–∏—Å–æ–∫ –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_settings_state:
        state, callback_message = user_settings_state[user_id]
        if state == "waiting_confidence":
            try:
                val = int(text)
                if 50 <= val <= 90:
                    notify_settings.setdefault(user_id, {})['min_confidence'] = val
                    bot.send_message(user_id, f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {val}%")
                    show_config_menu(callback_message)
                else:
                    bot.send_message(user_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ 50-90")
            except:
                bot.send_message(user_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
        elif state == "waiting_favorites":
            coins = [c.strip().upper() for c in text.split(",") if c.strip().endswith("USDT")]
            if coins:
                notify_settings.setdefault(user_id, {})['favorite_coins'] = coins
                bot.send_message(user_id, f"‚úÖ –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏: {', '.join(coins)}")
            else:
                bot.send_message(user_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: BTCUSDT,ETHUSDT")
            show_config_menu(callback_message)
            del user_settings_state[user_id]