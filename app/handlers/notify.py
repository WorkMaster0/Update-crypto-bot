# app/handlers/notify.py
from telebot import types
from app.bot import bot
from app.handlers.ai_alert import generate_ai_signal
from datetime import datetime
import re

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
notify_settings = {}
user_settings_state = {}  # —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É

# ---------- AI SIGNAL NOTIFICATION ----------
def send_test_notification(user_id: int):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ AI —Å–∏–≥–Ω–∞–ª–æ–º"""
    # –ü—Ä–∏–∫–ª–∞–¥ –∑ BTCUSDT
    signal = generate_ai_signal("BTCUSDT")
    text = [
        "üéØ <b>TEST AI ALERT</b>",
        signal["signal_text"],
        "",
        f"‚è∞ {datetime.utcnow().strftime('%H:%M:%S')} UTC",
        "",
        "üí° –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ—Ä–≥–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!"
    ]
    bot.send_message(user_id, "\n".join(text), parse_mode="HTML")

# ---------- SETTINGS MENU ----------
def show_config_menu(call):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å", callback_data="config_confidence"),
        types.InlineKeyboardButton("üìä –¢–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤", callback_data="config_types")
    )
    markup.row(
        types.InlineKeyboardButton("‚è∞ –ß–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", callback_data="config_time"),
        types.InlineKeyboardButton("üíé –£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏", callback_data="config_favorites")
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_back")
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏:",
        parse_mode="HTML",
        reply_markup=markup
    )

# ---------- SIGNAL TYPES MENU ----------
def show_signal_types_menu(call):
    """–ú–µ–Ω—é —Ç–∏–ø—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    user_id = call.from_user.id
    current_types = notify_settings.get(user_id, {}).get("signal_types", ["ALL"])
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –í–°–Ü", callback_data="type_all"),
        types.InlineKeyboardButton("üöÄ –ü–†–û–ë–û–á", callback_data="type_breakout")
    )
    markup.row(
        types.InlineKeyboardButton("üìà –¢–†–ï–ù–î–ò", callback_data="type_trend"),
        types.InlineKeyboardButton("üîç –°–ö–í–Ü–ó–ò", callback_data="type_squeeze")
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_config")
    )
    txt = ["üìä <b>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤:</b>\n"]
    for t in ["ALL","BREAKOUT","TREND","SQUEEZE"]:
        txt.append("‚úÖ "+t if t in current_types else "‚ö™Ô∏è "+t)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="\n".join(txt),
        parse_mode="HTML",
        reply_markup=markup
    )

# ---------- FAVORITES MENU ----------
def show_favorites_menu(call):
    """–ú–µ–Ω—é —É–ª—é–±–ª–µ–Ω–∏—Ö –º–æ–Ω–µ—Ç"""
    user_id = call.from_user.id
    favorites = notify_settings.get(user_id, {}).get("favorite_coins", [])
    markup = types.InlineKeyboardMarkup()
    response = ["üíé <b>–£–ª—é–±–ª–µ–Ω—ñ –º–æ–Ω–µ—Ç–∏:</b>\n"]
    if favorites:
        for coin in favorites:
            response.append(f"‚Ä¢ {coin}")
            markup.add(types.InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {coin}", callback_data=f"remove_{coin}"))
        markup.row(types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ", callback_data="clear_all"))
    else:
        response.append("‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
    markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notify_config"))
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="\n".join(response),
        parse_mode="HTML",
        reply_markup=markup
    )

# ---------- CALLBACK HANDLERS ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("type_"))
def handle_type_selection(call):
    user_id = call.from_user.id
    mapping = {
        "type_all": ["ALL"],
        "type_breakout": ["BREAKOUT"],
        "type_trend": ["TREND"],
        "type_squeeze": ["SQUEEZE"]
    }
    selected = mapping.get(call.data, ["ALL"])
    if user_id not in notify_settings:
        notify_settings[user_id] = {"enabled": True}
    notify_settings[user_id]["signal_types"] = selected
    bot.answer_callback_query(call.id, "‚úÖ –¢–∏–ø–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ")
    show_config_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_"))
def remove_favorite_callback(call):
    user_id = call.from_user.id
    coin = call.data.replace("remove_","")
    if user_id in notify_settings and "favorite_coins" in notify_settings[user_id]:
        if coin in notify_settings[user_id]["favorite_coins"]:
            notify_settings[user_id]["favorite_coins"].remove(coin)
            bot.answer_callback_query(call.id, f"‚úÖ {coin} –≤–∏–¥–∞–ª–µ–Ω–æ")
    show_favorites_menu(call)

@bot.callback_query_handler(func=lambda call: call.data == "clear_all")
def clear_all_favorites(call):
    user_id = call.from_user.id
    if user_id in notify_settings:
        notify_settings[user_id]["favorite_coins"] = []
    bot.answer_callback_query(call.id, "‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ")
    show_favorites_menu(call)