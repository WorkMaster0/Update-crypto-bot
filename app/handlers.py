import requests
from telebot import types
import re
from datetime import datetime
import numpy as np
from app.bot import bot
from app.analytics import (
    get_price, get_klines, generate_signal_text, trend_strength_text,
    find_levels, top_movers, position_size, normalize_symbol, find_atr_squeeze
)
from app.chart import plot_candles
from app.config import DEFAULT_INTERVAL, ALLOWED_INTERVALS

# –ø—Ä–æ—Å—Ç–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–∞—Ç—É –≤ –û–ó–ü
_user_defaults = {}  # chat_id -> {"interval": "1h"}

def _default_interval(chat_id):
    return _user_defaults.get(chat_id, {}).get("interval", DEFAULT_INTERVAL)

def _parse_args(msg_text: str):
    parts = msg_text.split()
    symbol = None
    interval = None
    if len(parts) >= 2:
        symbol = normalize_symbol(parts[1])
    if len(parts) >= 3 and parts[2] in ALLOWED_INTERVALS:
        interval = parts[2]
    return symbol, interval

# ---------- /start ----------
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, (
        "üöÄ <b>Crypto Analysis Bot</b> –∑–∞–ø—É—â–µ–Ω–æ!\n\n"
        "üìä <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "‚Ä¢ <code>/price BTCUSDT</code> - –ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞\n"
        "‚Ä¢ <code>/chart BTCUSDT 1h</code> - –≥—Ä–∞—Ñ—ñ–∫ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º\n"
        "‚Ä¢ <code>/levels BTCUSDT 4h</code> - —Ä—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É\n"
        "‚Ä¢ <code>/risk 1000 1 65000 64000</code> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∏–∑–∏–∫—É\n\n"
        "üîç <b>–ê–Ω–∞–ª—ñ–∑:</b>\n"
        "‚Ä¢ <code>/analyze BTCUSDT</code> - –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑\n"
        "‚Ä¢ <code>/scan gainers</code> - —Ç–æ–ø —Ä–æ—Å—Ç—É\n"
        "‚Ä¢ <code>/scan volume</code> - —Ç–æ–ø –æ–±—Å—è–≥—ñ–≤\n"
        "‚Ä¢ <code>/pattern BTCUSDT</code> - —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏\n\n"
        "ü§ñ <b>AI —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
        "‚Ä¢ <code>/ai_signal BTCUSDT</code> - AI —Å–∏–≥–Ω–∞–ª\n"
        "‚Ä¢ <code>/ai_scan</code> - AI —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ <code>/ai_strategy BTCUSDT</code> - —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è\n\n"
        "‚öôÔ∏è <code>/setdefault 1h</code> - —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º\n"
        "üìñ <code>/help</code> - –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    ), parse_mode="HTML")

# ---------- /help ----------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –û—Å–Ω–æ–≤–Ω—ñ", callback_data="help_basic"),
        types.InlineKeyboardButton("üîç –ê–Ω–∞–ª—ñ–∑", callback_data="help_analysis"),
        types.InlineKeyboardButton("ü§ñ AI", callback_data="help_ai"),
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="help_settings")
    )
    
    bot.reply_to(message, "üìñ <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏:</b>", 
                parse_mode="HTML", reply_markup=markup)

# ---------- /price ----------
@bot.message_handler(commands=['price'])
def price_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/price BTCUSDT</code>")
    try:
        price = get_price(symbol)
        bot.reply_to(message, f"üí∞ <b>{symbol}</b> = <b>{price:.6f}</b> USDT")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /chart ----------
@bot.message_handler(commands=['chart'])
def chart_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/chart BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        img = plot_candles(symbol, interval=interval, limit=200, with_levels=True)
        bot.send_photo(message.chat.id, img, caption=f"üìä <b>{symbol} [{interval}]</b>", parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /levels ----------
@bot.message_handler(commands=['levels'])
def levels_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/levels BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    try:
        candles = get_klines(symbol, interval=interval)
        lv = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in lv["supports"])
        r = ", ".join(f"{x:.4f}" for x in lv["resistances"])
        bot.reply_to(message, (
            f"üîé <b>{symbol}</b> [{interval}] Levels\n"
            f"Supports: {s or '‚Äî'}\n"
            f"Resistances: {r or '‚Äî'}\n"
            f"Nearest S: <b>{lv['near_support']:.4f}</b> | "
            f"Nearest R: <b>{lv['near_resistance']:.4f}</b>\n"
            f"ATR(14): {lv['atr']:.4f}"
        ), parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /analyze (–û–ë'–Ñ–î–ù–ê–ù–ê –ö–û–ú–ê–ù–î–ê) ----------
@bot.message_handler(commands=['analyze'])
def analyze_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/analyze BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {symbol} [{interval}]...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
        candles = get_klines(symbol, interval=interval)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–≥–Ω–∞–ª
        signal_text = generate_signal_text(symbol, interval=interval)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä—ñ–≤–Ω—ñ
        levels = find_levels(candles)
        s = ", ".join(f"{x:.4f}" for x in levels["supports"][-3:]) if levels["supports"] else "‚Äî"
        r = ", ".join(f"{x:.4f}" for x in levels["resistances"][-3:]) if levels["resistances"] else "‚Äî"
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥
        trend_text = trend_strength_text(candles)
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = [
            f"üéØ <b>–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ {symbol} [{interval}]:</b>\n",
            f"üìä {signal_text}",
            f"",
            f"üìà <b>–¢—Ä–µ–Ω–¥:</b> {trend_text}",
            f"",
            f"üîç <b>–ö–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ:</b>",
            f"‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∏: {s}",
            f"‚Ä¢ –û–ø–æ—Ä–∏: {r}",
            f"‚Ä¢ –ù–∞–π–±–ª–∏–∂—á–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: <b>{levels['near_support']:.4f}</b>",
            f"‚Ä¢ –ù–∞–π–±–ª–∏–∂—á–∏–π –æ–ø—ñ—Ä: <b>{levels['near_resistance']:.4f}</b>",
            f"",
            f"üìâ <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å (ATR):</b> {levels['atr']:.4f}"
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥—ñ–π
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üìä –ì—Ä–∞—Ñ—ñ–∫", callback_data=f"chart_{symbol}_{interval}"),
            types.InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"analyze_{symbol}_{interval}")
        )
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), 
                        parse_mode="HTML", reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /scan (–£–ù–Ü–§–Ü–ö–û–í–ê–ù–ï –°–ö–ê–ù–£–í–ê–ù–ù–Ø) ----------
@bot.message_handler(commands=['scan'])
def scan_handler(message):
    parts = message.text.split()
    scan_type = 'gainers' if len(parts) < 2 else parts[1].lower()
    
    scan_types = {
        'gainers': ('–¢–æ–ø —Ä–æ—Å—Ç—É', 'priceChangePercent', True),
        'losers': ('–¢–æ–ø –ø–∞–¥—ñ–Ω–Ω—è', 'priceChangePercent', False),
        'volume': ('–¢–æ–ø –æ–±—Å—è–≥—ñ–≤', 'quoteVolume', True),
        'breakouts': ('–ü—Ä–æ–±–æ—ó', 'priceChangePercent', True),
        'liquid': ('–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å', 'quoteVolume', True)
    }
    
    if scan_type not in scan_types:
        return bot.reply_to(message, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏: gainers, losers, volume, breakouts, liquid")
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"üîç –°–∫–∞–Ω—É—é {scan_types[scan_type][0]}...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=15)
        data = response.json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏
        usdt_pairs = [
            d for d in data 
            if (d['symbol'].endswith('USDT') and 
                float(d['quoteVolume']) > 10000000 and
                float(d['lastPrice']) > 0.01)
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±—Ä–∞–Ω–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—î–º
        key, reverse = scan_types[scan_type][1], scan_types[scan_type][2]
        sorted_pairs = sorted(usdt_pairs, key=lambda x: abs(float(x[key])) if scan_type == 'breakouts' else float(x[key]), reverse=reverse)
        
        # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-15
        top_pairs = sorted_pairs[:15]
        
        response = [f"üìä <b>{scan_types[scan_type][0]}:</b>\n"]
        
        for i, pair in enumerate(top_pairs, 1):
            symbol = pair['symbol']
            price = float(pair['lastPrice'])
            change = float(pair['priceChangePercent'])
            volume = float(pair['quoteVolume']) / 1000000  # –í –º—ñ–ª—å–π–æ–Ω–∞—Ö
            
            emoji = "üü¢" if change > 0 else "üî¥"
            
            if scan_type in ['gainers', 'losers', 'breakouts']:
                response.append(f"{i}. {emoji} {symbol}: {change:+.2f}% | ${price:.4f}")
            else:
                response.append(f"{i}. {symbol}: ${price:.4f} | Vol: {volume:.1f}M")
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /risk ----------
@bot.message_handler(commands=['risk'])
def risk_handler(message):
    parts = message.text.split()
    if len(parts) < 5:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/risk 1000 1 65000 64000</code> (balance risk% entry stop)")
    try:
        balance = float(parts[1])
        risk_pct = float(parts[2])
        entry = float(parts[3])
        stop = float(parts[4])
        res = position_size(balance, risk_pct, entry, stop)
        bot.reply_to(message, (
            f"üßÆ Risk: {risk_pct:.2f}% –≤—ñ–¥ ${balance:.2f} ‚Üí ${res['risk_amount']:.2f}\n"
            f"üì¶ Position size ‚âà <b>{res['qty']:.6f}</b> —Ç–æ–∫–µ–Ω—ñ–≤\n"
            f"üéØ 1R ‚âà {abs(entry - stop):.4f} | 2R TP ‚âà {entry + (res['rr_one_tp'] if entry>stop else -res['rr_one_tp']):.4f}"
        ), parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /pattern ----------
@bot.message_handler(commands=['pattern'])
def pattern_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/pattern BTCUSDT 1h</code>")
    interval = interval or _default_interval(message.chat.id)
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"üîç –®—É–∫–∞—é –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è {symbol} [{interval}]...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        candles = get_klines(symbol, interval=interval, limit=100)
        if not candles or len(candles['c']) < 20:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol} [{interval}]")
            return
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        patterns = detect_patterns(candles)
        
        if not patterns:
            bot.reply_to(message, f"üîç –î–ª—è {symbol} [{interval}] –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        response = [f"üéØ <b>–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è {symbol} [{interval}]:</b>\n"]
        
        for pattern_name, pattern_type, confidence in patterns[:5]:  # –û–±–º–µ–∂—É—î–º–æ 5 –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
            emoji = "üü¢" if pattern_type == "BULLISH" else "üî¥"
            response.append(f"{emoji} {pattern_name} ({confidence}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ)")
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- AI –ö–û–ú–ê–ù–î–ò (–°–ü–†–û–©–ï–ù–Ü) ----------
@bot.message_handler(commands=['ai_signal'])
def ai_signal_handler(message):
    symbol, interval = _parse_args(message.text)
    if not symbol:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/ai_signal BTCUSDT</code>")
    interval = interval or _default_interval(message.chat.id)
    
    try:
        processing_msg = bot.send_message(message.chat.id, f"ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î {symbol}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª
        signal_text = generate_signal_text(symbol, interval=interval)
        
        # –î–æ–¥–∞—î–º–æ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
        recommendation = generate_ai_recommendation(symbol, interval)
        
        response = [
            f"ü§ñ <b>AI –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} [{interval}]:</b>\n",
            f"üìä {signal_text}",
            f"",
            f"üí° <b>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>",
            f"{recommendation}"
        ]
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['ai_scan'])
def ai_scan_handler(message):
    try:
        processing_msg = bot.send_message(message.chat.id, "ü§ñ AI —Å–∫–∞–Ω—É—î —Ä–∏–Ω–æ–∫...")
        
        # –°–ø—Ä–æ—â–µ–Ω–µ AI —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        opportunities = find_ai_opportunities()
        
        if not opportunities:
            bot.reply_to(message, "üîç AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–∏–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
            return
        
        response = ["ü§ñ <b>AI –¢–æ–ø –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</b>\n"]
        
        for symbol, signal, confidence in opportunities[:5]:
            emoji = "üü¢" if "LONG" in signal else "üî¥"
            response.append(f"{emoji} {symbol}: {signal} ({confidence}% –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ)")
        
        bot.delete_message(message.chat.id, processing_msg.message_id)
        bot.send_message(message.chat.id, "\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ----------
def detect_patterns(candles):
    """–°–ø—Ä–æ—â–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü—ñ—è –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤"""
    patterns = []
    # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
    return patterns

def generate_ai_recommendation(symbol, interval):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    # –°–ø—Ä–æ—â–µ–Ω–∞ AI –ª–æ–≥—ñ–∫–∞
    return "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –±—É–¥–µ —Ç—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"

def find_ai_opportunities():
    """–ü–æ—à—É–∫ AI –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    # –°–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É
    return []

# ---------- Callback –æ–±—Ä–æ–±–Ω–∏–∫–∏ ----------
@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    try:
        if call.data.startswith('help_'):
            category = call.data.replace('help_', '')
            show_help_category(call, category)
        elif call.data.startswith('chart_'):
            data = call.data.split('_')
            symbol, interval = data[1], data[2]
            show_chart(call, symbol, interval)
        elif call.data.startswith('analyze_'):
            data = call.data.split('_')
            symbol, interval = data[1], data[2]
            reanalyze(call, symbol, interval)
            
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def show_help_category(call, category):
    help_texts = {
        'basic': "üìä <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n‚Ä¢ /price SYMBOL\n‚Ä¢ /chart SYMBOL\n‚Ä¢ /levels SYMBOL\n‚Ä¢ /risk –±–∞–ª–∞–Ω—Å —Ä–∏—Å–∫% –≤—Ö–æ–¥ —Å—Ç–æ–ø",
        'analysis': "üîç <b>–ê–Ω–∞–ª—ñ–∑:</b>\n‚Ä¢ /analyze SYMBOL\n‚Ä¢ /scan TYPE\n‚Ä¢ /pattern SYMBOL",
        'ai': "ü§ñ <b>AI:</b>\n‚Ä¢ /ai_signal SYMBOL\n‚Ä¢ /ai_scan\n‚Ä¢ /ai_strategy SYMBOL",
        'settings': "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n‚Ä¢ /setdefault INTERVAL"
    }
    
    bot.edit_message_text(help_texts.get(category, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"),
                         call.message.chat.id, call.message.message_id,
                         parse_mode="HTML")

def show_chart(call, symbol, interval):
    try:
        img = plot_candles(symbol, interval=interval, limit=100)
        bot.send_photo(call.message.chat.id, img, caption=f"üìä {symbol} [{interval}]")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def reanalyze(call, symbol, interval):
    try:
        # –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        bot.answer_callback_query(call.id, "üîÑ –û–Ω–æ–≤–ª—é—é –∞–Ω–∞–ª—ñ–∑...")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- /setdefault ----------
@bot.message_handler(commands=['setdefault'])
def setdefault_handler(message):
    parts = message.text.split()
    if len(parts) < 2 or parts[1] not in ALLOWED_INTERVALS:
        return bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: <code>/setdefault 1h</code>")
    _user_defaults.setdefault(message.chat.id, {})["interval"] = parts[1]
    bot.reply_to(message, f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É: <b>{parts[1]}</b>", parse_mode="HTML")