import requests
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class WhaleTracker:
    def __init__(self):
        self.base_url = "https://api.binance.com/api/v3"
        self.whale_threshold = 500000  # $500k –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∏—Ç–∞
        self.suspicious_activities = []
        
    def get_large_trades(self, symbol: str = "BTCUSDT", limit: int = 100) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ–ª–∏–∫—ñ —É–≥–æ–¥–∏ –∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–∞–Ω–∏—Ö"""
        try:
            url = f"{self.base_url}/trades"
            params = {'symbol': symbol, 'limit': limit}
            response = requests.get(url, params=params, timeout=10)
            trades = response.json()
            
            large_trades = []
            for trade in trades:
                trade_value = float(trade['price']) * float(trade['qty'])
                if trade_value >= self.whale_threshold:
                    large_trades.append({
                        'symbol': symbol,
                        'price': float(trade['price']),
                        'quantity': float(trade['qty']),
                        'value': trade_value,
                        'time': datetime.fromtimestamp(trade['time']/1000),
                        'is_buyer': trade['isBuyerMaker']
                    })
            
            return large_trades
        except Exception as e:
            logger.error(f"Error getting large trades: {e}")
            return []
    
    def detect_whale_accumulation(self, symbol: str = "BTCUSDT") -> Optional[Dict]:
        """–í–∏—è–≤–∏—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –∫–∏—Ç–∞–º–∏"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 500 —É–≥–æ–¥
            large_trades = self.get_large_trades(symbol, 500)
            
            if not large_trades:
                return None
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂—ñ –∫–∏—Ç—ñ–≤
            buy_volume = sum(trade['value'] for trade in large_trades if trade['is_buyer'])
            sell_volume = sum(trade['value'] for trade in large_trades if not trade['is_buyer'])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
            if buy_volume > sell_volume * 3:  # –ö—É–ø—ñ–≤–ª—è –ø–µ—Ä–µ–≤–∏—â—É—î –ø—Ä–æ–¥–∞–∂ —É 3 —Ä–∞–∑–∏
                return {
                    'symbol': symbol,
                    'type': 'ACCUMULATION',
                    'buy_volume': buy_volume,
                    'sell_volume': sell_volume,
                    'ratio': buy_volume / sell_volume,
                    'timestamp': datetime.now()
                }
            
            return None
            
        except Exception as e:
            logger.error(f"Error detecting whale accumulation: {e}")
            return None
    
    def detect_pump_preparation(self, symbol: str) -> Optional[Dict]:
        """–í–∏—è–≤–∏—Ç–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ –ø–∞–º–ø—É"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≥–ª–∏–±–∏–Ω—É —Ä–∏–Ω–∫—É
            url = f"{self.base_url}/depth?symbol={symbol}&limit=50"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–¥–µ—Ä–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂
            ask_orders = data['asks'][:20]  # –¢–æ–ø-20 –æ—Ä–¥–µ—Ä—ñ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂
            large_ask_orders = []
            
            for price, quantity in ask_orders:
                order_value = float(price) * float(quantity)
                if order_value > self.whale_threshold:
                    large_ask_orders.append({
                        'price': float(price),
                        'quantity': float(quantity),
                        'value': order_value
                    })
            
            # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–µ–ª–∏–∫—ñ –æ—Ä–¥–µ—Ä–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂ - –º–æ–∂–ª–∏–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –ø–∞–º–ø—É
            if large_ask_orders:
                total_value = sum(order['value'] for order in large_ask_orders)
                return {
                    'symbol': symbol,
                    'type': 'PUMP_PREPARATION',
                    'large_orders_count': len(large_ask_orders),
                    'total_value': total_value,
                    'orders': large_ask_orders[:5]  # –¢–æ–ø-5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
                }
            
            return None
            
        except Exception as e:
            logger.error(f"Error detecting pump preparation: {e}")
            return None
    
    def detect_dump_warning(self, symbol: str) -> Optional[Dict]:
        """–í–∏—è–≤–∏—Ç–∏ –æ–∑–Ω–∞–∫–∏ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –¥–∞–º–ø—É"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –≤–µ–ª–∏–∫—ñ —É–≥–æ–¥–∏
            large_trades = self.get_large_trades(symbol, 200)
            
            if not large_trades:
                return None
            
            # –®—É–∫–∞—î–º–æ –º–∞—Å–æ–≤—ñ –ø—Ä–æ–¥–∞–∂—ñ –∫–∏—Ç—ñ–≤
            recent_sells = [t for t in large_trades if not t['is_buyer']]
            recent_buys = [t for t in large_trades if t['is_buyer']]
            
            sell_volume = sum(t['value'] for t in recent_sells)
            buy_volume = sum(t['value'] for t in recent_buys)
            
            # –Ø–∫—â–æ –æ–±—Å—è–≥ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–Ω–∞—á–Ω–æ –ø–µ—Ä–µ–≤–∏—â—É—î –∫—É–ø—ñ–≤–ª—é
            if sell_volume > buy_volume * 2 and len(recent_sells) > 5:
                return {
                    'symbol': symbol,
                    'type': 'DUMP_WARNING',
                    'sell_volume': sell_volume,
                    'buy_volume': buy_volume,
                    'sell_count': len(recent_sells),
                    'buy_count': len(recent_buys),
                    'ratio': sell_volume / buy_volume if buy_volume > 0 else float('inf')
                }
            
            return None
            
        except Exception as e:
            logger.error(f"Error detecting dump warning: {e}")
            return None
    
    def monitor_top_cryptos(self) -> List[Dict]:
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ø-20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        top_symbols = [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
            'ADAUSDT', 'DOGEUSDT', 'AVAXUSDT', 'DOTUSDT', 'LINKUSDT',
            'MATICUSDT', 'SHIBUSDT', 'LTCUSDT', 'UNIUSDT', 'ATOMUSDT',
            'XMRUSDT', 'ETCUSDT', 'FILUSDT', 'APTUSDT', 'NEARUSDT'
        ]
        
        alerts = []
        
        for symbol in top_symbols:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                accumulation = self.detect_whale_accumulation(symbol)
                pump_prep = self.detect_pump_preparation(symbol)
                dump_warning = self.detect_dump_warning(symbol)
                
                if accumulation:
                    alerts.append(accumulation)
                if pump_prep:
                    alerts.append(pump_prep)
                if dump_warning:
                    alerts.append(dump_warning)
                    
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                logger.error(f"Error monitoring {symbol}: {e}")
                continue
        
        return alerts
    
    def format_whale_alert(self, alert: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–∏—Ç—ñ–≤"""
        if alert['type'] == 'ACCUMULATION':
            return (f"üêã <b>–ù–ê–ö–û–ü–ò–ß–ï–ù–ù–Ø –ö–ò–¢–ê</b> - {alert['symbol']}\n"
                   f"üìà –û–±—Å—è–≥ –∫—É–ø—ñ–≤–ª—ñ: ${alert['buy_volume']:,.0f}\n"
                   f"üìâ –û–±—Å—è–≥ –ø—Ä–æ–¥–∞–∂—É: ${alert['sell_volume']:,.0f}\n"
                   f"‚öñÔ∏è –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {alert['ratio']:.2f}x\n"
                   f"üöÄ <b>–ú–æ–∂–ª–∏–≤–∏–π –º–∞–π–±—É—Ç–Ω—ñ–π PUMP</b>")
        
        elif alert['type'] == 'PUMP_PREPARATION':
            return (f"üîß <b>–ü–Ü–î–ì–û–¢–û–í–ö–ê –î–û PUMP</b> - {alert['symbol']}\n"
                   f"üìä –í–µ–ª–∏–∫–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤: {alert['large_orders_count']}\n"
                   f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${alert['total_value']:,.0f}\n"
                   f"‚ö†Ô∏è <b>–û—á—ñ–∫—É–π—Ç–µ —Ä—É—Ö—É —Ü—ñ–Ω–∏</b>")
        
        elif alert['type'] == 'DUMP_WARNING':
            return (f"‚ö†Ô∏è <b>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –ü–†–û DUMP</b> - {alert['symbol']}\n"
                   f"üìâ –ü—Ä–æ–¥–∞–∂—ñ –∫–∏—Ç—ñ–≤: ${alert['sell_volume']:,.0f}\n"
                   f"üìà –ö—É–ø—ñ–≤–ª—ñ: ${alert['buy_volume']:,.0f}\n"
                   f"üîª –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {alert['ratio']:.2f}x\n"
                   f"üéØ <b>–ú–æ–∂–ª–∏–≤–∏–π –º–∞–π–±—É—Ç–Ω—ñ–π DUMP</b>")
        
        return ""

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
whale_tracker = WhaleTracker()