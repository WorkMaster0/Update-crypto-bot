# marketmaker_scanner.py
import requests
import logging
import time
from datetime import datetime
from typing import Dict, List, Optional
from utils import safe_request

logger = logging.getLogger(__name__)

class MarketMakerScanner:
    def __init__(self):
        self.base_url = "https://api.binance.com/api/v3"
        
    def get_current_price(self, symbol: str) -> float:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É —Ç–æ–∫–µ–Ω–∞"""
        try:
            url = f"{self.base_url}/ticker/price?symbol={symbol}"
            data = safe_request(url)
            if data and isinstance(data, dict) and 'price' in data:
                return float(data['price'])
            return 0
        except Exception as e:
            logger.error(f"Error getting current price for {symbol}: {e}")
            return 0
        
    def find_marketmaker_anomalies(self, symbol: str, bids: List, asks: List) -> List[Dict]:
        """–ó–Ω–∞–π—Ç–∏ –∞–Ω–æ–º–∞–ª—ñ—ó –º–∞—Ä–∫–µ—Ç–º–µ–π–∫–µ—Ä—ñ–≤ –≤ —Å—Ç–∞–∫–∞–Ω—ñ"""
        anomalies = []
        
        try:
            if not bids or not asks or len(bids) < 10 or len(asks) < 10:
                return anomalies
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            current_price = self.get_current_price(symbol)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü—ñ–Ω–∏ –≤ —á–∏—Å–ª–∞
            bid_prices = [float(b[0]) for b in bids]
            ask_prices = [float(a[0]) for a in asks]
            
            # 1. –ü–æ—à—É–∫ –ø—Ä–æ–ø—É—Å–∫—ñ–≤ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            for i in range(1, min(20, len(bid_prices))):
                if bid_prices[i-1] <= bid_prices[i]:
                    continue
                    
                gap = (bid_prices[i-1] - bid_prices[i]) / bid_prices[i] * 100
                if gap > 0.3:  # –ü—Ä–æ–ø—É—Å–∫ –±—ñ–ª—å—à–µ 0.3%
                    anomalies.append({
                        'symbol': symbol,
                        'type': 'LIQUIDITY_GAP',
                        'price': bid_prices[i],
                        'volume': float(bids[i][1]),
                        'impact': round(gap, 2),
                        'side': 'BID',
                        'opportunity': 'BUY_LIMIT_IN_GAP'
                    })
            
            for i in range(1, min(20, len(ask_prices))):
                if ask_prices[i] <= ask_prices[i-1]:
                    continue
                    
                gap = (ask_prices[i] - ask_prices[i-1]) / ask_prices[i-1] * 100
                if gap > 0.3:
                    anomalies.append({
                        'symbol': symbol,
                        'type': 'LIQUIDITY_GAP',
                        'price': ask_prices[i],
                        'volume': float(asks[i][1]),
                        'impact': round(gap, 2),
                        'side': 'ASK',
                        'opportunity': 'SELL_LIMIT_IN_GAP'
                    })
            
            # 2. –ü–æ—à—É–∫ fat-finger –æ—Ä–¥–µ—Ä—ñ–≤ (–¥—É–∂–µ –≤–µ–ª–∏–∫—ñ) –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ü—ñ–Ω–∏
            for i, (price, volume) in enumerate(bids[:15]):
                order_size = float(price) * float(volume)
                price_float = float(price)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü—ñ–Ω–∞ –≤ –º–µ–∂–∞—Ö ¬±10% –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó
                if (order_size > 200000 and current_price > 0 and
                    0.9 * current_price < price_float < 1.1 * current_price):
                    
                    anomalies.append({
                        'symbol': symbol,
                        'type': 'FAT_FINGER',
                        'price': price_float,
                        'volume': float(volume),
                        'size_usd': order_size,
                        'side': 'BID',
                        'position': i + 1,
                        'opportunity': 'WAIT_FOR_CANCEL'
                    })
            
            for i, (price, volume) in enumerate(asks[:15]):
                order_size = float(price) * float(volume)
                price_float = float(price)
                
                if (order_size > 200000 and current_price > 0 and
                    0.9 * current_price < price_float < 1.1 * current_price):
                    
                    anomalies.append({
                        'symbol': symbol,
                        'type': 'FAT_FINGER',
                        'price': price_float,
                        'volume': float(volume),
                        'size_usd': order_size,
                        'side': 'ASK', 
                        'position': i + 1,
                        'opportunity': 'WAIT_FOR_CANCEL'
                    })
            
            # 3. –ü–æ—à—É–∫ –º–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∏—Ö —Å—Ç—ñ–Ω –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ü—ñ–Ω–∏
            for i, (price, volume) in enumerate(bids[:5]):
                order_size = float(price) * float(volume)
                price_float = float(price)
                
                if (order_size > 500000 and i == 0 and current_price > 0 and
                    0.9 * current_price < price_float < 1.1 * current_price):
                    
                    anomalies.append({
                        'symbol': symbol,
                        'type': 'MANIPULATION_WALL',
                        'price': price_float,
                        'volume': float(volume),
                        'size_usd': order_size,
                        'side': 'BID',
                        'opportunity': 'FOLLOW_WHALE'
                    })
            
            for i, (price, volume) in enumerate(asks[:5]):
                order_size = float(price) * float(volume)
                price_float = float(price)
                
                if (order_size > 500000 and i == 0 and current_price > 0 and
                    0.9 * current_price < price_float < 1.1 * current_price):
                    
                    anomalies.append({
                        'symbol': symbol,
                        'type': 'MANIPULATION_WALL',
                        'price': price_float,
                        'volume': float(volume),
                        'size_usd': order_size,
                        'side': 'ASK',
                        'opportunity': 'FOLLOW_WHALE'
                    })
            
            return anomalies
            
        except Exception as e:
            logger.error(f"Error analyzing market maker anomalies for {symbol}: {e}")
            return []
    
    def scan_top_symbols(self, top_count: int = 20) -> List[Dict]:
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–æ–ø–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –∞–Ω–æ–º–∞–ª—ñ—ó"""
        all_anomalies = []
        top_symbols = [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
            'ADAUSDT', 'DOGEUSDT', 'AVAXUSDT', 'DOTUSDT', 'LINKUSDT',
            'MATICUSDT', 'SHIBUSDT', 'LTCUSDT', 'UNIUSDT', 'ATOMUSDT',
            'XMRUSDT', 'ETCUSDT', 'FILUSDT', 'APTUSDT', 'NEARUSDT'
        ]
        
        for symbol in top_symbols[:top_count]:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≥–ª–∏–±–∏–Ω—É —Ä–∏–Ω–∫—É
                depth_url = f"{self.base_url}/depth?symbol={symbol}&limit=50"
                depth_data = safe_request(depth_url)
                
                if not depth_data or not isinstance(depth_data, dict):
                    continue
                
                bids = depth_data.get('bids', [])
                asks = depth_data.get('asks', [])
                
                # –®—É–∫–∞—î–º–æ –∞–Ω–æ–º–∞–ª—ñ—ó
                anomalies = self.find_marketmaker_anomalies(symbol, bids, asks)
                if anomalies:
                    all_anomalies.extend(anomalies)
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                logger.error(f"Error scanning {symbol}: {e}")
                continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º impact
        all_anomalies.sort(key=lambda x: x.get('impact', 0) if 'impact' in x else x.get('size_usd', 0), reverse=True)
        return all_anomalies
    
    def format_anomaly_message(self, anomaly: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–Ω–æ–º–∞–ª—ñ—é"""
        if anomaly['type'] == 'LIQUIDITY_GAP':
            return (f"üìä <b>–ü—Ä–æ–ø—É—Å–∫ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ</b> - {anomaly['symbol']}\n"
                   f"–°—Ç–æ—Ä–æ–Ω–∞: {anomaly['side']}\n"
                   f"–¶—ñ–Ω–∞: ${anomaly['price']:.6f}\n"
                   f"–†–æ–∑—Ä–∏–≤: {anomaly['impact']}%\n"
                   f"üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {anomaly['opportunity']}")
        
        elif anomaly['type'] == 'FAT_FINGER':
            return (f"üí• <b>Fat-Finger –æ—Ä–¥–µ—Ä</b> - {anomaly['symbol']}\n"
                   f"–°—Ç–æ—Ä–æ–Ω–∞: {anomaly['side']}\n"
                   f"–¶—ñ–Ω–∞: ${anomaly['price']:.6f}\n"
                   f"–†–æ–∑–º—ñ—Ä: ${anomaly['size_usd']:,.0f}\n"
                   f"–ü–æ–∑–∏—Ü—ñ—è: #{anomaly['position']}\n"
                   f"üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {anomaly['opportunity']}")
        
        elif anomaly['type'] == 'MANIPULATION_WALL':
            return (f"üé≠ <b>–ú–∞–Ω—ñ–ø—É–ª—è—Ç–∏–≤–Ω–∞ —Å—Ç—ñ–Ω–∞</b> - {anomaly['symbol']}\n"
                   f"–°—Ç–æ—Ä–æ–Ω–∞: {anomaly['side']}\n"
                   f"–¶—ñ–Ω–∞: ${anomaly['price']:.6f}\n"
                   f"–†–æ–∑–º—ñ—Ä: ${anomaly['size_usd']:,.0f}\n"
                   f"üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {anomaly['opportunity']}")
        
        return ""

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
marketmaker_scanner = MarketMakerScanner()