import os
import requests
import logging
import threading
import time
from datetime import datetime
from flask import Flask, request
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
USER_SETTINGS = {
    'min_volume': 5000000,
    'top_symbols': 30,
    'window_size': 20,
    'sensitivity': 0.005,
    'pump_threshold': 15,  # % –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–∞–º–ø—É
    'dump_threshold': -15  # % –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –¥–∞–º–ø—É
}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Ç—ñ–≤, —è–∫—ñ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
ALERT_SUBSCRIPTIONS = {}

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def get_klines(symbol, interval="1h", limit=200):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Binance"""
    try:
        url = "https://api.binance.com/api/v3/klines"
        params = {
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        }
        data = requests.get(url, params=params, timeout=10).json()
        
        if not data:
            return None
            
        df = {
            'o': [float(c[1]) for c in data],
            'h': [float(c[2]) for c in data],
            'l': [float(c[3]) for c in data],
            'c': [float(c[4]) for c in data],
            'v': [float(c[5]) for c in data],
            't': [c[0] for c in data]
        }
        return df
    except Exception as e:
        logger.error(f"Error getting klines for {symbol}: {e}")
        return None

def find_support_resistance(prices, window=20, delta=0.005):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –æ–ø–æ—Ä—É"""
    n = len(prices)
    rolling_high = [0] * n
    rolling_low = [0] * n
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ rolling_high —Ç–∞ rolling_low
    for i in range(window, n):
        rolling_high[i] = max(prices[i-window:i])
        rolling_low[i] = min(prices[i-window:i])
    
    levels = []
    for i in range(window, n):
        if prices[i] >= rolling_high[i] * (1 - delta):
            levels.append(rolling_high[i])
        elif prices[i] <= rolling_low[i] * (1 + delta):
            levels.append(rolling_low[i])
    
    return sorted(set(levels))

def calculate_rsi(prices, period=14):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSI –±–µ–∑ numpy"""
    if len(prices) < period + 1:
        return 50  # –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö
    
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d if d > 0 else 0 for d in deltas]
    losses = [-d if d < 0 else 0 for d in deltas]
    
    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period
    
    for i in range(period, len(gains)):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period
    
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_volume_spike(volumes, lookback=20):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–ª–µ—Å–∫—É –æ–±—Å—è–≥—ñ–≤"""
    if len(volumes) < lookback:
        return False
    recent_volume = volumes[-1]
    avg_volume = sum(volumes[-lookback:]) / lookback
    return recent_volume > 1.5 * avg_volume

def calculate_technical_indicators(closes, volumes):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤"""
    rsi = calculate_rsi(closes)
    vol_spike = calculate_volume_spike(volumes)
    return rsi, vol_spike

def detect_pump_dump(closes, volumes, pump_threshold=15, dump_threshold=-15):
    """–í–∏—è–≤–ª–µ–Ω–Ω—è –ø–∞–º–ø—É –∞–±–æ –¥–∞–º–ø—É"""
    if len(closes) < 24:
        return None, 0
    
    # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
    price_change_24h = (closes[-1] - closes[-24]) / closes[-24] * 100
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±—Å—è–≥—É
    vol_spike = calculate_volume_spike(volumes)
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø–æ–¥—ñ—ó
    event_type = None
    if price_change_24h > pump_threshold and vol_spike:
        event_type = "PUMP"
    elif price_change_24h < dump_threshold and vol_spike:
        event_type = "DUMP"
    
    return event_type, price_change_24h

def analyze_market():
    """–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è –ø–æ—à—É–∫—É –ø–∞–º–ø—ñ–≤/–¥–∞–º–ø—ñ–≤"""
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()

        symbols = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > USER_SETTINGS['min_volume']
        ]

        symbols = sorted(
            symbols,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )

        top_symbols = [s["symbol"] for s in symbols[:USER_SETTINGS['top_symbols']]]

        alerts = []
        for symbol in top_symbols:
            try:
                df = get_klines(symbol, interval="1h", limit=200)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = [float(c) for c in df["c"]]
                volumes = [float(v) for v in df["v"]]

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–∞–º–ø/–¥–∞–º–ø
                event_type, price_change = detect_pump_dump(
                    closes, volumes, 
                    USER_SETTINGS['pump_threshold'], 
                    USER_SETTINGS['dump_threshold']
                )

                if event_type:
                    alert_text = (
                        f"üî¥ {event_type} DETECTED!\n"
                        f"–¢–æ–∫–µ–Ω: {symbol}\n"
                        f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change:+.1f}%\n"
                        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {'–®–æ—Ä—Ç' if event_type == 'PUMP' else '–õ–æ–Ω–≥'}"
                    )
                    alerts.append(alert_text)

            except Exception as e:
                logger.error(f"Error processing {symbol}: {e}")
                continue

        return alerts

    except Exception as e:
        logger.error(f"Error in market analysis: {e}")
        return []

def send_alerts_to_subscribers():
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º"""
    if not ALERT_SUBSCRIPTIONS:
        return
    
    alerts = analyze_market()
    if not alerts:
        return
    
    alert_text = "\n\n".join(alerts[:5])  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω—å
    
    for chat_id in ALERT_SUBSCRIPTIONS.keys():
        try:
            bot.send_message(chat_id, f"üö® –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–ü–û–í–Ü–©–ï–ù–ù–Ø:\n\n{alert_text}")
        except Exception as e:
            logger.error(f"Error sending alert to {chat_id}: {e}")

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
scheduler = BackgroundScheduler()
scheduler.add_job(send_alerts_to_subscribers, 'interval', minutes=30)
scheduler.start()

# Flask –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤
@app.route('/')
def index():
    return "Crypto Bot is running!"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
        return 'ok', 200

# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    help_text = """
ü§ñ Smart Crypto Bot - –ê–Ω–∞–ª—ñ–∑ –ø–∞–º–ø—ñ–≤ —Ç–∞ –¥–∞–º–ø—ñ–≤

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/smart_auto - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
/check_token <token> - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É
/alerts_on - –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/alerts_off - –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['alerts_on'])
def enable_alerts(message):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    ALERT_SUBSCRIPTIONS[message.chat.id] = True
    bot.reply_to(message, "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–∞–º–ø/–¥–∞–º–ø.")

@bot.message_handler(commands=['alerts_off'])
def disable_alerts(message):
    """–í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    if message.chat.id in ALERT_SUBSCRIPTIONS:
        del ALERT_SUBSCRIPTIONS[message.chat.id]
    bot.reply_to(message, "üîï –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")

@bot.message_handler(commands=['settings'])
def show_settings(message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("–ú—ñ–Ω. –æ–±—Å—è–≥ üìä"),
        KeyboardButton("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç üî¢"),
        KeyboardButton("–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å ‚öñÔ∏è"),
        KeyboardButton("PUMP % üìà"),
        KeyboardButton("DUMP % üìâ"),
        KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†")
    )
    
    settings_text = f"""
–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:

–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥: {USER_SETTINGS['min_volume']:,.0f} USDT
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {USER_SETTINGS['top_symbols']}
–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å: {USER_SETTINGS['sensitivity'] * 100}%
PUMP –ø–æ—Ä—ñ–≥: {USER_SETTINGS['pump_threshold']}%
DUMP –ø–æ—Ä—ñ–≥: {USER_SETTINGS['dump_threshold']}%
"""
    bot.send_message(message.chat.id, settings_text, reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–ú—ñ–Ω. –æ–±—Å—è–≥ üìä")
def set_min_volume(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤ (USDT):")
    bot.register_next_step_handler(msg, process_min_volume)

def process_min_volume(message):
    try:
        volume = float(message.text.replace(',', '').replace(' ', ''))
        USER_SETTINGS['min_volume'] = volume
        bot.send_message(message.chat.id, f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {volume:,.0f} USDT")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç üî¢")
def set_top_symbols(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:")
    bot.register_next_step_handler(msg, process_top_symbols)

def process_top_symbols(message):
    try:
        count = int(message.text)
        USER_SETTINGS['top_symbols'] = count
        bot.send_message(message.chat.id, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å ‚öñÔ∏è")
def set_sensitivity(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å (0.1-5.0%):")
    bot.register_next_step_handler(msg, process_sensitivity)

def process_sensitivity(message):
    try:
        sensitivity = float(message.text)
        if 0.1 <= sensitivity <= 5.0:
            USER_SETTINGS['sensitivity'] = sensitivity / 100
            bot.send_message(message.chat.id, f"–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {sensitivity}%")
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –º—ñ–∂ 0.1 —Ç–∞ 5.0")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "PUMP % üìà")
def set_pump_threshold(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä—ñ–≥ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è PUMP (%):")
    bot.register_next_step_handler(msg, process_pump_threshold)

def process_pump_threshold(message):
    try:
        threshold = float(message.text)
        USER_SETTINGS['pump_threshold'] = threshold
        bot.send_message(message.chat.id, f"PUMP –ø–æ—Ä—ñ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {threshold}%")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "DUMP % üìâ")
def set_dump_threshold(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä—ñ–≥ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è DUMP (%):")
    bot.register_next_step_handler(msg, process_dump_threshold)

def process_dump_threshold(message):
    try:
        threshold = float(message.text)
        USER_SETTINGS['dump_threshold'] = threshold
        bot.send_message(message.chat.id, f"DUMP –ø–æ—Ä—ñ–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {threshold}%")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†")
def main_menu(message):
    send_welcome(message)

@bot.message_handler(commands=['smart_auto'])
def smart_auto_handler(message):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    try:
        msg = bot.send_message(message.chat.id, "üîç –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫...")
        
        alerts = analyze_market()
        if alerts:
            alert_text = "\n\n".join(alerts[:10])
            bot.edit_message_text(f"<b>üö® –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–∏:</b>\n\n{alert_text}", 
                                 message.chat.id, msg.message_id, parse_mode="HTML")
        else:
            bot.edit_message_text("‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", 
                                 message.chat.id, msg.message_id)

    except Exception as e:
        logger.error(f"Error in smart_auto: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['check_token'])
def check_token_handler(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    try:
        symbol = message.text.split()[1].upper() + "USDT"
        df = get_klines(symbol, interval="1h", limit=200)
        
        if not df:
            bot.send_message(message.chat.id, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        closes = [float(c) for c in df["c"]]
        volumes = [float(v) for v in df["v"]]
        last_price = closes[-1]
        
        # –ê–Ω–∞–ª—ñ–∑
        rsi, vol_spike = calculate_technical_indicators(closes, volumes)
        sr_levels = find_support_resistance(closes)
        event_type, price_change = detect_pump_dump(closes, volumes)
        
        analysis_text = f"""
<b>{symbol} Analysis</b>

–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${last_price:.4f}
RSI: {rsi:.1f} {'(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å)' if rsi > 70 else '(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å)' if rsi < 30 else ''}
–û–±—Å—è–≥: {'–ø—ñ–¥–≤–∏—â–µ–Ω–∏–π' if vol_spike else '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π'}
–ü–æ–¥—ñ—è: {event_type if event_type else '–Ω–µ–º–∞—î'} ({price_change:+.1f}%)

<b>Key Levels:</b>
"""
        for level in sr_levels[-5:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä—ñ–≤–Ω—ñ–≤
            distance_pct = (last_price - level) / level * 100
            analysis_text += f"{level:.4f} ({distance_pct:+.1f}%)\n"

        # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
        if event_type == "PUMP":
            analysis_text += "\nüî¥ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –®–æ—Ä—Ç (–º–æ–∂–ª–∏–≤–∏–π –∫–æ—Ä–µ–∫—Ü—ñ—è –ø—ñ—Å–ª—è –ø–∞–º–ø—É)"
        elif event_type == "DUMP":
            analysis_text += "\nüü¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –õ–æ–Ω–≥ (–º–æ–∂–ª–∏–≤–∏–π –≤—ñ–¥—Å–∫–æ–∫ –ø—ñ—Å–ª—è –¥–∞–º–ø—É)"

        bot.send_message(message.chat.id, analysis_text, parse_mode="HTML")
        
    except IndexError:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /check_token BTC")
    except Exception as e:
        logger.error(f"Error in check_token: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['stats'])
def market_stats(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É"""
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º –æ–±—Å—è–≥–æ–º
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 1000000]
        
        # –¢–æ–ø –≥–µ–π–Ω–µ—Ä–∏/–ª–æ—Å–µ—Ä–∏
        gainers = sorted(usdt_pairs, key=lambda x: float(x['priceChangePercent']), reverse=True)[:5]
        losers = sorted(usdt_pairs, key=lambda x: float(x['priceChangePercent']))[:5]
        
        stats_text = "<b>üìà Market Statistics</b>\n\n"
        stats_text += "<b>Top Gainers:</b>\n"
        for i, coin in enumerate(gainers, 1):
            stats_text += f"{i}. {coin['symbol']} +{float(coin['priceChangePercent']):.1f}%\n"
        
        stats_text += "\n<b>Top Losers:</b>\n"
        for i, coin in enumerate(losers, 1):
            stats_text += f"{i}. {coin['symbol']} {float(coin['priceChangePercent']):.1f}%\n"
            
        bot.send_message(message.chat.id, stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in stats: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç –∑ –æ—Ç–æ—á–µ–Ω–Ω—è (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è Render)
    port = int(os.environ.get('PORT', 5000))
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫ —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ
    bot.remove_webhook()
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
    webhook_url = os.environ.get('WEBHOOK_URL', '')
    if webhook_url:
        bot.set_webhook(url=f"{webhook_url}/webhook")
        logger.info(f"Webhook set to: {webhook_url}/webhook")
        app.run(host='0.0.0.0', port=port)
    else:
        # –Ø–∫—â–æ WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ polling
        logger.info("Starting bot with polling...")
        bot.polling(none_stop=True)