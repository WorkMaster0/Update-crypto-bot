import os
import requests
import logging
from datetime import datetime
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
USER_SETTINGS = {
    'min_volume': 5000000,
    'top_symbols': 30,
    'window_size': 20,
    'sensitivity': 0.005
}

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def get_klines(symbol, interval="1h", limit=200):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Binance"""
    try:
        url = "https://api.binance.com/api/v3/klines"
        params = {
            'symbol': symbol,
            'interval': interval,
            'limit': limit
        }
        data = requests.get(url, params=params, timeout=10).json()
        
        if not data:
            return None
            
        df = {
            'o': [float(c[1]) for c in data],
            'h': [float(c[2]) for c in data],
            'l': [float(c[3]) for c in data],
            'c': [float(c[4]) for c in data],
            'v': [float(c[5]) for c in data],
            't': [c[0] for c in data]
        }
        return df
    except Exception as e:
        logger.error(f"Error getting klines for {symbol}: {e}")
        return None

def find_support_resistance(prices, window=20, delta=0.005):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –æ–ø–æ—Ä—É"""
    n = len(prices)
    rolling_high = [0] * n
    rolling_low = [0] * n
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ rolling_high —Ç–∞ rolling_low
    for i in range(window, n):
        rolling_high[i] = max(prices[i-window:i])
        rolling_low[i] = min(prices[i-window:i])
    
    levels = []
    for i in range(window, n):
        if prices[i] >= rolling_high[i] * (1 - delta):
            levels.append(rolling_high[i])
        elif prices[i] <= rolling_low[i] * (1 + delta):
            levels.append(rolling_low[i])
    
    return sorted(set(levels))

def calculate_rsi(prices, period=14):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSI –±–µ–∑ numpy"""
    if len(prices) < period + 1:
        return 50  # –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö
    
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    gains = [d if d > 0 else 0 for d in deltas]
    losses = [-d if d < 0 else 0 for d in deltas]
    
    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period
    
    for i in range(period, len(gains)):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period
    
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_volume_spike(volumes, lookback=20):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–ª–µ—Å–∫—É –æ–±—Å—è–≥—ñ–≤"""
    if len(volumes) < lookback:
        return False
    recent_volume = volumes[-1]
    avg_volume = sum(volumes[-lookback:]) / lookback
    return recent_volume > 1.5 * avg_volume

def calculate_technical_indicators(closes, volumes):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤"""
    rsi = calculate_rsi(closes)
    vol_spike = calculate_volume_spike(volumes)
    return rsi, vol_spike

# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, —è–∫ —É –≤–∞—à–æ–º—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—ñ)
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    help_text = """
ü§ñ Smart Crypto Bot - –ê–Ω–∞–ª—ñ–∑ –ø–∞–º–ø—ñ–≤ —Ç–∞ –¥–∞–º–ø—ñ–≤

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥—ã:
/smart_auto - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
/check_token <token> - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–∫–µ–Ω
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['settings'])
def show_settings(message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ú—ñ–Ω. –æ–±—Å—è–≥ üìä"))
    keyboard.add(KeyboardButton("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç üî¢"))
    keyboard.add(KeyboardButton("–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å ‚öñÔ∏è"))
    keyboard.add(KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†"))
    
    settings_text = f"""
–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:

–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥: {USER_SETTINGS['min_volume']:,.0f} USDT
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {USER_SETTINGS['top_symbols']}
–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å: {USER_SETTINGS['sensitivity'] * 100}%
"""
    bot.send_message(message.chat.id, settings_text, reply_markup=keyboard)

@bot.message_handler(commands=['smart_auto'])
def smart_auto_handler(message):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    try:
        msg = bot.send_message(message.chat.id, "üîç –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫...")
        
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()

        symbols = [
            d for d in data
            if d["symbol"].endswith("USDT") and float(d["quoteVolume"]) > USER_SETTINGS['min_volume']
        ]

        symbols = sorted(
            symbols,
            key=lambda x: abs(float(x["priceChangePercent"])),
            reverse=True
        )

        top_symbols = [s["symbol"] for s in symbols[:USER_SETTINGS['top_symbols']]]

        signals = []
        for symbol in top_symbols:
            try:
                df = get_klines(symbol, interval="1h", limit=200)
                if not df or len(df.get("c", [])) < 50:
                    continue

                closes = [float(c) for c in df["c"]]
                volumes = [float(v) for v in df["v"]]
                last_price = closes[-1]

                # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
                rsi, vol_spike = calculate_technical_indicators(closes, volumes)
                
                # –†—ñ–≤–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É
                sr_levels = find_support_resistance(
                    closes, 
                    window=USER_SETTINGS['window_size'], 
                    delta=USER_SETTINGS['sensitivity']
                )

                signal = None
                for lvl in sr_levels:
                    diff = last_price - lvl
                    diff_pct = (diff / lvl) * 100

                    if last_price > lvl * 1.01 and diff_pct > 1:
                        signal = (
                            f"üöÄ LONG breakout\n"
                            f"–ü—Ä–æ–±–∏—Ç–æ –æ–ø—ñ—Ä: ${lvl:.4f}\n"
                            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${last_price:.4f}\n"
                            f"RSI: {rsi:.1f} | Volume: {'üìà' if vol_spike else 'üìâ'}"
                        )
                        break
                    elif last_price < lvl * 0.99 and diff_pct < -1:
                        signal = (
                            f"‚ö° SHORT breakout\n"
                            f"–ü—Ä–æ–±–∏—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É: ${lvl:.4f}\n"
                            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${last_price:.4f}\n"
                            f"RSI: {rsi:.1f} | Volume: {'üìà' if vol_spike else 'üìâ'}"
                        )
                        break

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–∞–º–ø/–¥–∞–º–ø
                if len(closes) >= 24:
                    price_change_24h = (closes[-1] - closes[-24]) / closes[-24] * 100
                else:
                    price_change_24h = 0
                
                if abs(price_change_24h) > 15 and vol_spike:
                    direction = "PUMP" if price_change_24h > 0 else "DUMP"
                    signal = (
                        f"üî¥ {direction} DETECTED!\n"
                        f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change_24h:+.1f}%\n"
                        f"–û–±—Å—è–≥: {'–µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π' if vol_spike else '–ø—ñ–¥–≤–∏—â–µ–Ω–∏–π'}\n"
                        f"RSI: {rsi:.1f}"
                    )

                if signal:
                    signals.append(f"<b>{symbol}</b>\n{signal}\n" + "-"*40)

            except Exception as e:
                logger.error(f"Error processing {symbol}: {e}")
                continue

        if not signals:
            bot.edit_message_text("‚ÑπÔ∏è –ñ–æ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", message.chat.id, msg.message_id)
        else:
            text = f"<b>üìä Smart Auto Signals</b>\n\n" + "\n".join(signals[:10])  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ñ–≤
            bot.edit_message_text(text, message.chat.id, msg.message_id, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in smart_auto: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['check_token'])
def check_token_handler(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    try:
        symbol = message.text.split()[1].upper() + "USDT"
        df = get_klines(symbol, interval="1h", limit=200)
        
        if not df:
            bot.send_message(message.chat.id, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö")
            return
            
        closes = [float(c) for c in df["c"]]
        volumes = [float(v) for v in df["v"]]
        last_price = closes[-1]
        
        # –ê–Ω–∞–ª—ñ–∑
        rsi, vol_spike = calculate_technical_indicators(closes, volumes)
        sr_levels = find_support_resistance(closes)
        
        analysis_text = f"""
<b>{symbol} Analysis</b>

–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${last_price:.4f}
RSI: {rsi:.1f} {'(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å)' if rsi > 70 else '(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å)' if rsi < 30 else ''}
–û–±—Å—è–≥: {'–ø—ñ–¥–≤–∏—â–µ–Ω–∏–π' if vol_spike else '–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π'}

<b>Key Levels:</b>
"""
        for level in sr_levels[-5:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä—ñ–≤–Ω—ñ–≤
            distance_pct = (last_price - level) / level * 100
            analysis_text += f"{level:.4f} ({distance_pct:+.1f}%)\n"

        bot.send_message(message.chat.id, analysis_text, parse_mode="HTML")
        
    except IndexError:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /check_token BTC")
    except Exception as e:
        logger.error(f"Error in check_token: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@bot.message_handler(commands=['stats'])
def market_stats(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É"""
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = requests.get(url, timeout=10).json()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ USDT –ø–∞—Ä–∏ –∑ –≤–∏—Å–æ–∫–∏–º –æ–±—Å—è–≥–æ–º
        usdt_pairs = [d for d in data if d['symbol'].endswith('USDT') and float(d['quoteVolume']) > 1000000]
        
        # –¢–æ–ø –≥–µ–π–Ω–µ—Ä–∏/–ª–æ—Å–µ—Ä–∏
        gainers = sorted(usdt_pairs, key=lambda x: float(x['priceChangePercent']), reverse=True)[:5]
        losers = sorted(usdt_pairs, key=lambda x: float(x['priceChangePercent']))[:5]
        
        stats_text = "<b>üìà Market Statistics</b>\n\n"
        stats_text += "<b>Top Gainers:</b>\n"
        for i, coin in enumerate(gainers, 1):
            stats_text += f"{i}. {coin['symbol']} +{float(coin['priceChangePercent']):.1f}%\n"
        
        stats_text += "\n<b>Top Losers:</b>\n"
        for i, coin in enumerate(losers, 1):
            stats_text += f"{i}. {coin['symbol']} {float(coin['priceChangePercent']):.1f}%\n"
            
        bot.send_message(message.chat.id, stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in stats: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)
